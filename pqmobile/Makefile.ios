# iOS Cross-compilation Makefile for PQMobile

# Target architecture (arm64 or x86_64)
TARGET ?= arm64
SYSROOT ?= iphoneos

# Set developer directory for Xcode
export DEVELOPER_DIR := /Applications/Xcode.app/Contents/Developer

# iOS SDK detection
ifeq ($(TARGET),arm64)
	SDKROOT := $(shell xcrun --sdk $(SYSROOT) --show-sdk-path 2>/dev/null)
	ARCH := arm64
	CROSS_COMPILE := aarch64-apple-ios
else ifeq ($(TARGET),x86_64)
	SDKROOT := $(shell xcrun --sdk $(SYSROOT) --show-sdk-path 2>/dev/null)
	ARCH := x86_64
	CROSS_COMPILE := x86_64-apple-ios
endif

# Output directory by target arch
ifeq ($(TARGET),arm64)
	OUTDIR := ios-arm64
else ifeq ($(TARGET),x86_64)
	OUTDIR := ios-x86_64
else
	OUTDIR := ios-$(TARGET)
endif


# Check if SDK was found
ifndef SDKROOT
$(error iOS SDK not found. Make sure Xcode is installed and xcrun is available.)
endif

# Compiler and flags
CC := clang
CFLAGS := -arch $(ARCH) -isysroot $(SDKROOT) -miphoneos-version-min=12.0
CFLAGS += -O3 -Wall -Wextra -std=c99 -I./common
AR := ar
ARFLAGS := -r

# Source directories (pqnist Reference_Implementation structure)

# Output libraries
LIBS := libml-kem-512.a libml-kem-768.a libml-kem-1024.a
LIBS += libml-dsa-44.a libml-dsa-65.a libml-dsa-87.a
LIBS += libhqc-128.a libhqc-192.a libhqc-256.a

.PHONY: all clean

all: $(LIBS)

# ML-KEM builds (using pqnist Reference_Implementation)
libml-kem-512.a:
	@echo "Building ML-KEM-512 for iOS $(TARGET)..."
	@cd Reference_Implementation/crypto_kem/kyber512 && \
	 $(CC) $(CFLAGS) -c cbd.c fips202.c indcpa.c kem.c ntt.c poly.c polyvec.c reduce.c rng.c verify.c symmetric-shake.c && \
	 mkdir -p ../../../../$(OUTDIR) && $(AR) -r ../../../../$(OUTDIR)/$@ *.o

libml-kem-768.a:
	@echo "Building ML-KEM-768 for iOS $(TARGET)..."
	@cd Reference_Implementation/crypto_kem/kyber768 && \
	 $(CC) $(CFLAGS) -c cbd.c fips202.c indcpa.c kem.c ntt.c poly.c polyvec.c reduce.c rng.c verify.c symmetric-shake.c && \
	 mkdir -p ../../../../$(OUTDIR) && $(AR) -r ../../../../$(OUTDIR)/$@ *.o

libml-kem-1024.a:
	@echo "Building ML-KEM-1024 for iOS $(TARGET)..."
	@cd Reference_Implementation/crypto_kem/kyber1024 && \
	 $(CC) $(CFLAGS) -c cbd.c fips202.c indcpa.c kem.c ntt.c poly.c polyvec.c reduce.c rng.c verify.c symmetric-shake.c && \
	 mkdir -p ../../../../$(OUTDIR) && $(AR) -r ../../../../$(OUTDIR)/$@ *.o

# ML-DSA builds (using pqnist Reference_Implementation)
libml-dsa-44.a:
	@echo "Building ML-DSA-44 for iOS $(TARGET)..."
	@cd Reference_Implementation/crypto_sign/dilithium2 && \
	 $(CC) $(CFLAGS) -c fips202.c ntt.c packing.c poly.c polyvec.c reduce.c rounding.c sign.c symmetric-shake.c && \
	 mkdir -p ../../../../$(OUTDIR) && $(AR) -r ../../../../$(OUTDIR)/$@ *.o

libml-dsa-65.a:
	@echo "Building ML-DSA-65 for iOS $(TARGET)..."
	@cd Reference_Implementation/crypto_sign/dilithium3 && \
	 $(CC) $(CFLAGS) -c fips202.c ntt.c packing.c poly.c polyvec.c reduce.c rounding.c sign.c symmetric-shake.c && \
	 mkdir -p ../../../../$(OUTDIR) && $(AR) -r ../../../../$(OUTDIR)/$@ *.o

libml-dsa-87.a:
	@echo "Building ML-DSA-87 for iOS $(TARGET)..."
	@cd Reference_Implementation/crypto_sign/dilithium5 && \
	 $(CC) $(CFLAGS) -c fips202.c ntt.c packing.c poly.c polyvec.c reduce.c rounding.c sign.c symmetric-shake.c && \
	 mkdir -p ../../../../$(OUTDIR) && $(AR) -r ../../../../$(OUTDIR)/$@ *.o

# HQC builds (using pqnist Reference_Implementation)
libhqc-128.a:
	@echo "Building HQC-128 for iOS $(TARGET)..."
	@cd Reference_Implementation/hqc-128 && \
	 $(CC) $(CFLAGS) -c code.c fft.c gf.c gf2x.c hqc.c kem.c parsing.c reed_muller.c reed_solomon.c shake_ds.c shake_prng.c vector.c && \
	 mkdir -p ../../$(OUTDIR) && $(AR) -r ../../$(OUTDIR)/$@ *.o

libhqc-192.a:
	@echo "Building HQC-192 for iOS $(TARGET)..."
	@cd Reference_Implementation/hqc-192 && \
	 $(CC) $(CFLAGS) -c code.c fft.c gf.c gf2x.c hqc.c kem.c parsing.c reed_muller.c reed_solomon.c shake_ds.c shake_prng.c vector.c && \
	 mkdir -p ../../$(OUTDIR) && $(AR) -r ../../$(OUTDIR)/$@ *.o

libhqc-256.a:
	@echo "Building HQC-256 for iOS $(TARGET)..."
	@cd Reference_Implementation/hqc-256 && \
	 $(CC) $(CFLAGS) -c code.c fft.c gf.c gf2x.c hqc.c kem.c parsing.c reed_muller.c reed_solomon.c shake_ds.c shake_prng.c vector.c && \
	 mkdir -p ../../$(OUTDIR) && $(AR) -r ../../$(OUTDIR)/$@ *.o

clean:
	@echo "Cleaning iOS build artifacts..."
	@find . -name "*.a" -delete
	@find . -name "*.o" -delete
	@for dir in ml-kem-*/clean ml-dsa-*/clean falcon-*/clean hqc-*/clean; do \
		if [ -d "$$dir" ]; then \
			cd $$dir && make clean 2>/dev/null || true; \
			cd - >/dev/null; \
		fi; \
	done

