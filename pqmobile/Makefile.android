# Android Cross-compilation Makefile for PQMobile

# Target architecture
TARGET ?= arm64-v8a

# Android NDK setup
ANDROID_NDK_HOME ?= $(HOME)/Android/Sdk/ndk/21.4.7075529
TOOLCHAIN := $(ANDROID_NDK_HOME)/toolchains/llvm/prebuilt/darwin-x86_64

# Architecture-specific settings
ifeq ($(TARGET),arm64-v8a)
	ARCH := aarch64-linux-android
	API_LEVEL := 21
else ifeq ($(TARGET),armeabi-v7a)
	ARCH := armv7a-linux-androideabi
	API_LEVEL := 21
endif

# Output directory by target ABI
ifeq ($(TARGET),arm64-v8a)
	OUTDIR := android-arm64
else ifeq ($(TARGET),armeabi-v7a)
	OUTDIR := android-armv7
else
	OUTDIR := android-$(TARGET)
endif


# Compiler and flags
CC := $(TOOLCHAIN)/bin/$(ARCH)$(API_LEVEL)-clang
CFLAGS := -O3 -Wall -Wextra -std=c99 -I. -Icommon
AR := $(TOOLCHAIN)/bin/$(ARCH)$(API_LEVEL)-ar
ARFLAGS := -r

# Source directories (pqnist Reference_Implementation structure)

# Output libraries
LIBS := libml-kem-512.a libml-kem-768.a libml-kem-1024.a
LIBS += libml-dsa-44.a libml-dsa-65.a libml-dsa-87.a
LIBS += libhqc-128.a libhqc-192.a libhqc-256.a

.PHONY: all clean

all: $(LIBS)

# ML-KEM builds (using pqnist Reference_Implementation)
libml-kem-512.a:
	@echo "Building ML-KEM-512 for Android $(TARGET)..."
	@cd Reference_Implementation/crypto_kem/kyber512 && \
	 $(CC) $(CFLAGS) -c cbd.c fips202.c indcpa.c kem.c ntt.c poly.c polyvec.c reduce.c rng.c verify.c symmetric-shake.c && \
	 mkdir -p ../../../../$(OUTDIR) && $(AR) -r ../../../../$(OUTDIR)/$@ *.o

libml-kem-768.a:
	@echo "Building ML-KEM-768 for Android $(TARGET)..."
	@cd Reference_Implementation/crypto_kem/kyber768 && \
	 $(CC) $(CFLAGS) -c cbd.c fips202.c indcpa.c kem.c ntt.c poly.c polyvec.c reduce.c rng.c verify.c symmetric-shake.c && \
	 mkdir -p ../../../../$(OUTDIR) && $(AR) -r ../../../../$(OUTDIR)/$@ *.o

libml-kem-1024.a:
	@echo "Building ML-KEM-1024 for Android $(TARGET)..."
	@cd Reference_Implementation/crypto_kem/kyber1024 && \
	 $(CC) $(CFLAGS) -c cbd.c fips202.c indcpa.c kem.c ntt.c poly.c polyvec.c reduce.c rng.c verify.c symmetric-shake.c && \
	 mkdir -p ../../../../$(OUTDIR) && $(AR) -r ../../../../$(OUTDIR)/$@ *.o

# ML-DSA builds (using pqnist Reference_Implementation)
libml-dsa-44.a:
	@echo "Building ML-DSA-44 for Android $(TARGET)..."
	@cd Reference_Implementation/crypto_sign/dilithium2 && \
	 $(CC) $(CFLAGS) -c fips202.c ntt.c packing.c poly.c polyvec.c reduce.c rounding.c sign.c symmetric-shake.c && \
	 mkdir -p ../../../../$(OUTDIR) && $(AR) -r ../../../../$(OUTDIR)/$@ *.o

libml-dsa-65.a:
	@echo "Building ML-DSA-65 for Android $(TARGET)..."
	@cd Reference_Implementation/crypto_sign/dilithium3 && \
	 $(CC) $(CFLAGS) -c fips202.c ntt.c packing.c poly.c polyvec.c reduce.c rounding.c sign.c symmetric-shake.c && \
	 mkdir -p ../../../../$(OUTDIR) && $(AR) -r ../../../../$(OUTDIR)/$@ *.o

libml-dsa-87.a:
	@echo "Building ML-DSA-87 for Android $(TARGET)..."
	@cd Reference_Implementation/crypto_sign/dilithium5 && \
	 $(CC) $(CFLAGS) -c fips202.c ntt.c packing.c poly.c polyvec.c reduce.c rounding.c sign.c symmetric-shake.c && \
	 mkdir -p ../../../../$(OUTDIR) && $(AR) -r ../../../../$(OUTDIR)/$@ *.o

# HQC builds (using pqnist Reference_Implementation)
libhqc-128.a:
	@echo "Building HQC-128 for Android $(TARGET)..."
	@cd Reference_Implementation/hqc-128 && \
	 $(CC) $(CFLAGS) -c code.c fft.c gf.c gf2x.c hqc.c kem.c parsing.c reed_muller.c reed_solomon.c shake_ds.c shake_prng.c vector.c && \
	 mkdir -p ../../$(OUTDIR) && $(AR) -r ../../$(OUTDIR)/$@ *.o

libhqc-192.a:
	@echo "Building HQC-192 for Android $(TARGET)..."
	@cd Reference_Implementation/hqc-192 && \
	 $(CC) $(CFLAGS) -c code.c fft.c gf.c gf2x.c hqc.c kem.c parsing.c reed_muller.c reed_solomon.c shake_ds.c shake_prng.c vector.c && \
	 mkdir -p ../../$(OUTDIR) && $(AR) -r ../../$(OUTDIR)/$@ *.o

libhqc-256.a:
	@echo "Building HQC-256 for Android $(TARGET)..."
	@cd Reference_Implementation/hqc-256 && \
	 $(CC) $(CFLAGS) -c code.c fft.c gf.c gf2x.c hqc.c kem.c parsing.c reed_muller.c reed_solomon.c shake_ds.c shake_prng.c vector.c && \
	 mkdir -p ../../$(OUTDIR) && $(AR) -r ../../$(OUTDIR)/$@ *.o

clean:
	@echo "Cleaning Android build artifacts..."
	@find . -name "*.a" -delete
	@find . -name "*.o" -delete
	@for dir in ml-kem-*/clean ml-dsa-*/clean falcon-*/clean hqc-*/clean; do \
		if [ -d "$$dir" ]; then \
			cd $$dir && make clean 2>/dev/null || true; \
			cd - >/dev/null; \
		fi; \
	done

